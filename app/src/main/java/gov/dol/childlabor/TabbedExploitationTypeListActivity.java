package gov.dol.childlabor;

import android.content.Context;
import android.content.Intent;
import android.graphics.Color;
import android.graphics.ColorFilter;
import android.graphics.ColorMatrixColorFilter;
import android.os.Bundle;
import androidx.fragment.app.Fragment;
import androidx.fragment.app.FragmentManager;
import androidx.fragment.app.FragmentPagerAdapter;
import androidx.fragment.app.FragmentStatePagerAdapter;
import androidx.viewpager.widget.PagerAdapter;
import androidx.viewpager.widget.ViewPager;
import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.Toolbar;
import android.view.LayoutInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.TextView;

import java.util.ArrayList;

import io.karim.MaterialTabs;

public class TabbedExploitationTypeListActivity extends AppCompatActivity {

    /**
     * The {@link PagerAdapter} that will provide
     * fragments for each of the sections. We use a
     * {@link FragmentPagerAdapter} derivative, which will keep every
     * loaded fragment in memory. If this becomes too memory intensive, it
     * may be best to switch to a
     * {@link FragmentStatePagerAdapter}.
     */
    private SectionsPagerAdapter mSectionsPagerAdapter;

    /**
     * The {@link ViewPager} that will host the section contents.
     */
    private CustomViewPager mViewPager;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_tabbed_exploitation_type_list);

        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        // Create the adapter that will return a fragment for each of the three
        // primary sections of the activity.
        mSectionsPagerAdapter = new SectionsPagerAdapter(getSupportFragmentManager(), this);


        // Set up the ViewPager with the sections adapter.
        mViewPager = (CustomViewPager) findViewById(R.id.container);
        mViewPager.setPagingEnabled(false);
        mViewPager.setAdapter(mSectionsPagerAdapter);

        MaterialTabs tabLayout = (MaterialTabs) findViewById(R.id.tabs);
        tabLayout.setViewPager(mViewPager);

        AppHelpers.trackScreenView((AnalyticsApplication) getApplication(), "Exploitation Types List Screen");
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();

        return super.onOptionsItemSelected(item);
    }

    public void selectGoodWidget(View v) {
        CountryGood countryGood = (CountryGood) v.getTag();

        Good selectedGood = new Good("Good");

        GoodXmlParser parser = GoodXmlParser.fromContext(this);
        Good[] goods = parser.getGoodList();
        for(Good good : goods) {
            if (good.getName().equals(countryGood.getGoodName())) {
                selectedGood = good;
            }
        }

        Intent intent = new Intent(this, GoodViewActivity.class);
        intent.putExtra("good", selectedGood);
        startActivity(intent);
    }

    public void selectCountryWidget(View v) {
        Country selectedCountry = (Country) v.getTag();

        Intent intent = new Intent(this, CountryViewActivity.class);
        intent.putExtra("country", selectedCountry);
        startActivity(intent);
    }

    /**
     * A {@link FragmentPagerAdapter} that returns a fragment corresponding to
     * one of the sections/tabs/pages.
     */
    public class SectionsPagerAdapter extends FragmentPagerAdapter implements MaterialTabs.CustomTabProvider {

        private Context context;

        private int[] images = {
                0,
                R.drawable.hand,
                R.drawable.man,
                R.drawable.hand_black
        };

        private String[] titles = {
                "All",
                "Child Labor",
                "Forced Labor",
                "Forced Child Labor"
        };

        public SectionsPagerAdapter(FragmentManager fm, Context context) {
            super(fm);
            this.context = context;
        }

        @Override
        public Fragment getItem(int position) {
            // getItem is called to instantiate the fragment for the given page.
            // Return a PlaceholderFragment (defined as a static inner class below).
            return PlaceholderFragment.newInstance(position + 1);
        }

        @Override
        public int getCount() {
            // Show 3 total pages.
            return 4;
        }

        @Override
        public CharSequence getPageTitle(int position) {
            return titles[position];
        }

        @Override
        public View getCustomTabView(ViewGroup parent, int position) {
            LayoutInflater theInflater = LayoutInflater.from(context);
            View theView = theInflater.inflate(R.layout.exploitation_type_list_tab, parent, false);

            ImageView imageView = (ImageView) theView.findViewById(R.id.tabImageView);
            TextView textView = (TextView) theView.findViewById(R.id.tabTextView);
            textView.setText(titles[position]);


            if (position > 0 ) {
                textView.setTextSize(12.0f);
                imageView.setImageDrawable(context.getResources().getDrawable(images[position]));
                imageView.setColorFilter(Color.WHITE);
                imageView.setVisibility(View.VISIBLE);

                if (position == 3) {
                    //To generate negative image
                    float[] colorMatrix_Negative = {
                            -1.0f, 0, 0, 0, 255, //red
                            0, -1.0f, 0, 0, 255, //green
                            0, 0, -1.0f, 0, 255, //blue
                            0, 0, 0, 1.0f, 0 //alpha
                    };

                    ColorFilter colorFilter_Negative = new ColorMatrixColorFilter(colorMatrix_Negative);
                    imageView.setColorFilter(colorFilter_Negative);
                }
            }

            return theView;
        }
    }

    /**
     * A placeholder fragment containing a simple view.
     */
    public static class PlaceholderFragment extends Fragment {
        /**
         * The fragment argument representing the section number for this
         * fragment.
         */
        private static final String ARG_SECTION_NUMBER = "section_number";

        /**
         * Returns a new instance of this fragment for the given section
         * number.
         */
        public static PlaceholderFragment newInstance(int sectionNumber) {
            PlaceholderFragment fragment = new PlaceholderFragment();
            Bundle args = new Bundle();
            args.putInt(ARG_SECTION_NUMBER, sectionNumber);
            fragment.setArguments(args);
            return fragment;
        }

        public PlaceholderFragment() {
        }

        @Override
        public View onCreateView(LayoutInflater inflater, ViewGroup container,
                                 Bundle savedInstanceState) {
            View rootView = inflater.inflate(R.layout.fragment_tabbed_exploitation_type_list, container, false);

            int sectionNumber = getArguments().getInt(ARG_SECTION_NUMBER);

            Country[] allCountries = CountryXmlParser.fromContext(getContext()).getCountyListWithExploitation();
            ArrayList<Country> countryList = new ArrayList<>();
            for(Country country : allCountries) {
                switch(sectionNumber) {
                    case 2:
                        if (country.getChildLaborGoods().length > 0) countryList.add(country);
                        break;
                    case 3:
                        if (country.getForcedLaborGoods().length > 0) countryList.add(country);
                        break;
                    case 4:
                        if (country.getForcedChildLaborGoods().length > 0) countryList.add(country);
                        break;
                    default:
                        countryList.add(country);
                }
            }

            ListView listView = (ListView) rootView.findViewById(R.id.listView);
            listView.setAdapter(new ExploitationListAdapter(getActivity(), countryList.toArray(new Country[countryList.size()]), sectionNumber));
            listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
                @Override
                public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                    Intent intent = new Intent(getActivity(), CountryViewActivity.class);
                    startActivity(intent);
                }
            });

            return rootView;
        }
    }
}
